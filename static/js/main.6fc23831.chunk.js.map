{"version":3,"sources":["buttons.js","ToDoApp.js","App.js","serviceWorker.js","index.js"],"names":["Views","props","className","onClick","this","updateView","id","React","Component","ToDoApp","state","items","text","view","title","note","handleChange","bind","handleSubmit","changedCheck","setView","clearList","selectAll","switchBtn","e","preventDefault","tempView","tempTitle","target","setState","checked","newItemsArr","map","item","index","window","localStorage","setItem","JSON","stringify","parse","value","length","newItem","Date","now","newArr","concat","done","inprogress","switch","tmpItems","filter","tmpNote","onSubmit","type","placeholder","onChange","class","aria-hidden","TodoItem","checkDone","changeItem","TodoList","updateLocalStorage","key","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6fc23831.chunk.js","sourcesContent":["import React from 'react';\n\nclass Views extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex justify-content-between\">\n\n                <button onClick={this.props.updateView} id=\"all\" className=\"btn btn-sm btn-outline-warning px-4\">\n                    All\n                            </button>\n\n                <button onClick={this.props.updateView} id=\"inprogress\" className=\"btn btn-sm btn-outline-warning px-3\">\n                    To-do\n                            </button>\n\n                <button onClick={this.props.updateView} id=\"done\" className=\"btn btn-sm btn-outline-warning px-3\">\n                    Done\n                            </button>\n\n            </div>\n        )\n    }\n}\n\nexport default Views;","import React from 'react';\nimport Views from './buttons'\nimport './ToDoApp.css'\n\n\nclass ToDoApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            text: '',\n            view: 'inprogress',\n            title: 'To-do',\n            note: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.changedCheck = this.changedCheck.bind(this);\n        this.setView = this.setView.bind(this);\n        this.clearList = this.clearList.bind(this);\n        this.selectAll = this.selectAll.bind(this);\n        this.switchBtn = \"Complete all\"\n    }\n\n    async setView(e) {\n        e.preventDefault();\n\n        let tempView = 'inprogress'\n        let tempTitle = 'To-do'\n\n        if (e.target.id == \"done\") {\n            tempView = \"done\"\n            tempTitle = \"Done\"\n        }\n        else if (e.target.id == \"inprogress\") {\n            tempView = \"inprogress\"\n            tempTitle = \"To-do\"\n        }\n        else if (e.target.id == \"all\") {\n            tempView = \"all\"\n            tempTitle = \"All\"\n        }\n\n        await this.setState({\n            view: tempView,\n            title: tempTitle,\n        })\n    }\n\n    changedCheck(id, checked) {\n        const newItemsArr = this.state.items.map((item, index) => {\n            if (item.id === id) {\n                item.checked = checked\n            }\n            return item\n        })\n\n        this.setState({\n            items: newItemsArr,\n        })\n    }\n\n    componentDidUpdate() {\n        window.localStorage.setItem('items', JSON.stringify(this.state.items))\n    }\n\n\n    componentDidMount() {\n        if (window.localStorage.items) {\n            let items = JSON.parse(window.localStorage.items)\n            this.setState({\n                items: items,\n                view: 'inprogress'\n            })\n        }\n    }\n\n    handleChange(e) {\n        this.setState({ text: e.target.value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        if (this.state.text.length === 0) {\n            return;\n        }\n        const newItem = {\n            text: this.state.text,\n            id: Date.now(),\n            checked: false,\n        };\n\n        const newArr = this.state.items.concat(newItem)\n        this.setState({\n            items: newArr,\n            text: '',\n        });\n    }\n\n    clearList(e) {\n        e.preventDefault();\n        this.setState({\n            items: [],\n            done: [],\n            inprogress: [],\n        })\n    }\n\n    selectAll(e) {\n        e.preventDefault();\n\n        const selectAll = this.state.items.map((item) => {\n            if(item.checked === false) {\n                item.checked = true\n                this.switchBtn = \"Restore all\"\n            } else if (item.checked === true) {\n                item.checked = false\n                this.switchBtn = \"Complete all\"\n            } \n        })\n\n        this.setState({\n            item: selectAll,\n            switch: this.switchBtn\n        })\n    }\n\n    render() {\n\n        let tmpItems = this.state.items;\n        if (this.state.view === \"inprogress\") {\n            tmpItems = this.state.items.filter(item => (item.checked === false))\n        }\n\n        if (this.state.view === \"done\") {\n            tmpItems = this.state.items.filter(item => (item.checked === true))\n        }\n\n        let tmpNote = this.state.note;\n        if(tmpItems.length === 0){\n            tmpNote = \"You're all done!\"\n        }\n        if (tmpItems.length > 0){\n            tmpNote = \"Items remaining: \" + tmpItems.length\n        }\n\n\n        return (\n            <div>\n                <div className=\"d-flex justify-content-between\">\n                    <button onClick={this.selectAll} className=\"btn btn-sm btn-outline-warning px-3 float-right\">{this.switchBtn}</button>\n                    <button onClick={this.clearList} className=\"btn btn-sm btn-outline-light px-3 float-right\">Clear</button>\n                </div>\n                <form className=\"mt-3\" onSubmit={this.handleSubmit}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control\" placeholder=\"I need to...\" id=\"button-addon2\" onChange={this.handleChange} value={this.state.text}></input>\n                        <button onClick={this.handleSubmit} className=\"btn btn-outline-light\" type=\"button\" id=\"button-addon2\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button>\n                    </div>\n                </form>\n                <h1 className=\"text-left text-warning\">{this.state.title}</h1>\n                <div className=\"list\">\n                    <TodoList changedCheck={this.changedCheck} items={tmpItems} />\n                </div>\n                <p className=\"mt-3 text-center\">{tmpNote}</p>\n                <Views updateView={this.setView} />\n            </div>\n        );\n    }\n}\n\n\nclass TodoItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkDone = this.checkDone.bind(this);\n        this.state = { checked: false }\n    }\n\n    async checkDone(e) {\n        await this.setState({\n            checked: !this.state.checked,\n        })\n\n        this.props.changeItem(this.props.id, this.state.checked)\n    }\n\n    componentDidMount() {\n        this.setState({\n            checked: this.props.checked\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"appField\">\n                <li>\n                    <input type=\"checkbox\" checked={this.state.checked} onChange={this.checkDone}></input>\n                    {this.props.text}\n                </li>\n            </div>\n        )\n    }\n}\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    updateLocalStorage(id, checked) {\n        this.props.changedCheck(id, checked)\n    }\n\n    render() {\n        let tmpItems = this.props.items;\n        return (\n            <form>\n                <ul className=\"text-left list-unstyled px-3\">\n                    {tmpItems.map(item => (\n                        <TodoItem\n                            changeItem={this.updateLocalStorage.bind(this)}\n                            key={item.id}\n                            id={item.id}\n                            text={item.text}\n                            checked={item.checked} />\n                    ))}\n                </ul>\n            </form>\n        );\n    }\n\n}\n\nexport default ToDoApp;","import React from 'react';\nimport './App.css';\nimport ToDoApp from './ToDoApp'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className=\"App-header\">\n        <ToDoApp />\n      </div>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}